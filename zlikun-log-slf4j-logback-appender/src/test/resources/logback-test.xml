<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="true" scan="true" scanPeriod="3 seconds">

	<contextName>zlikun-log</contextName>

	<timestamp key="byDate" datePattern="yyyyMMdd"/>

	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 指定输出流，默认：System.out，这里修改为：System.err，允许取值参考：ch.qos.logback.core.joran.spi.ConsoleTarget -->
		<target>System.err</target>
		<!-- 默认Encoder：ch.qos.logback.classic.encoder.PatternLayoutEncoder -->
		<encoder>
			<!-- 测试发现：未在Action中解析的属性，应在子标签中设定才能生效 -->
			<charset>UTF-8</charset>
			<!-- ch.qos.logback.classic.PatternLayout -->
			<pattern>%d{yyyy/MM/dd HH:mm:ss} | %contextName | %t | %level | %logger | %msg%n</pattern>
		</encoder>
	</appender>

	<appender name="FILE" class="ch.qos.logback.core.FileAppender">
		<!-- 设置日志文件路径(只能设置为本地文件路径) -->
		<!-- 绝对路径 -->
		<!-- <file>/data/simple/server.log</file> -->
		<!-- 相对路径，相对于当前工程根目录 -->
		<file>build/data/server.log</file>
		<!-- 设置IO缓冲区，取值单位参考：ch.qos.logback.core.util.FileSize，该设置默认值：8kb -->
		<bufferSize>4 kb</bufferSize>
		<!-- 设置文件写入方式是否追加，默认：true，false表示每次都清空上次写入 -->
		<append>false</append>
		<!-- 于#start()方法中使用，用于强制append = true，并输出警告，默认：false(不启用) -->
		<prudent>true</prudent>
		<!-- 设置是否立即刷新，默认：true -->
		<immediateFlush>false</immediateFlush>
		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d{yyyy/MM/dd HH:mm:ss} | %contextName | %t | %level | %logger | %msg%n</pattern>
		</encoder>
	</appender>

	<appender name="ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 下面几项设置继承自FileAppender -->
		<file>build/data/server.rolling.log</file>
		<bufferSize>32 kb</bufferSize>
		<!-- 配置滚动策略：https://logback.qos.ch/manual/appenders.html#TimeBasedRollingPolicy -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 每天滚动一次，通过指定.zip/.gz压缩日志文件 -->
			<fileNamePattern>build/data/server.%d{yyyyMMdd}.log.zip</fileNamePattern>
			<!-- 最大保留30天，总日志量不能超过3G，单个日志文件不能超过100MB -->
			<maxHistory>30</maxHistory>
			<maxFileSize>100MB</maxFileSize>
			<totalSizeCap>3GB</totalSizeCap>
		</rollingPolicy>

		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d{yyyy/MM/dd HH:mm:ss} | %contextName | %t | %level | %logger | %msg%n</pattern>
		</encoder>
	</appender>

	<appender name="ROLLING_FILE2" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>build/data/server-${byDate}.log</file>
		<bufferSize>32 kb</bufferSize>

		<!-- 根据固定索引计数滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<fileNamePattern>build/data/server.%i.log.zip</fileNamePattern>
			<minIndex>1</minIndex>
			<maxIndex>9</maxIndex>
		</rollingPolicy>

		<!-- 配合FixedWindowRollingPolicy滚动策略，每5MB滚动一次日志 -->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<maxFileSize>4KB</maxFileSize>
		</triggeringPolicy>

		<encoder>
			<charset>UTF-8</charset>
			<pattern>%d{yyyy/MM/dd HH:mm:ss} | %contextName | %t | %level | %logger | %msg%n</pattern>
		</encoder>
	</appender>

	<appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
		<!-- 配套SQL脚本文件于下面目录中存放 -->
		<!-- logback/logback-classic/src/main/resources/ch/qos/logback/classic/db/script -->
		<!--
		<connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
			<driverClass>com.mysql.jdbc.Driver</driverClass>
			<url>jdbc:mysql://192.168.9.223:3306/test</url>
			<user>root</user>
			<password>ablejava</password>
		</connectionSource>
		-->
		<!-- 使用连接池 -->
		<connectionSource class="ch.qos.logback.core.db.DataSourceConnectionSource">
			<dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
				<driverClass>com.mysql.jdbc.Driver</driverClass>
				<jdbcUrl>jdbc:mysql://192.168.9.223:3306/test</jdbcUrl>
				<user>root</user>
				<password>ablejava</password>
				<initialPoolSize>10</initialPoolSize>
				<minPoolSize>10</minPoolSize>
				<maxPoolSize>30</maxPoolSize>
				<maxIdleTime>30</maxIdleTime>
			</dataSource>
		</connectionSource>
	</appender>

	<appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 阻塞式队列最大长度，默认：256，取值范围为正整数，队列默认实现：ArrayBlockingQueue -->
		<queueSize>128</queueSize>
		<!-- 丢弃阈值，默认情况下，当队列容量剩余20%时，将丢弃TRACE、DEBUG、INFO级别日志，只保留WARN和ERROR级别的日志，如果全部保留，设置为：0，其取值范围为：0 ~ queueSize -->
		<!-- 实际存在于队列中的日志并不会丢弃，只是新进的不符合条件的日志将被丢弃，参考：ch.qos.logback.core.AsyncAppenderBase#append(E) -->
		<!-- <discardingThreshold>0</discardingThreshold> -->
		<!-- 最大刷新时间毫秒数，默认：1000，当Worker(AsyncAppender中的任务线程)停止时，刷新woker.join的时间(用于处理队列中剩余的数据) -->
		<maxFlushTime>1000</maxFlushTime>
		<!-- 永远不阻塞，默认：false，为true时表示不阻塞队列，但当队列满时，插入元素被忽略，实际造成了丢日志(经测试当写入速度远大于IO速度时，将丢失大量的日志，包含WARN、ERROR级别日志) -->
		<!-- 反之，当队列满时，队列将阻塞，影响性能和程序响应 -->
		<neverBlock>false</neverBlock>
		<!-- 是否包含调用者信息，非常影响性能，默认：false -->
		<includeCallerData>true</includeCallerData>
		<!-- 引用的Appender，实现输出日志用，AsyncAppender仅用于代理该Appender -->
		<appender-ref ref="FILE" />
	</appender>

	<root level="INFO">
		<appender-ref ref="STDOUT" />
	</root>

	<logger name="com.zlikun.log.ConsoleAppenderTest" level="DEBUG" additivity="false">
		<appender-ref ref="STDOUT" />
	</logger>
	<logger name="com.zlikun.log.FileAppenderTest" level="DEBUG" additivity="false">
		<appender-ref ref="FILE" />
	</logger>
	<logger name="com.zlikun.log.RollingFileAppenderTest" level="DEBUG" additivity="false">
		<appender-ref ref="ROLLING_FILE" />
	</logger>
	<logger name="com.zlikun.log.DBAppenderTest" level="DEBUG" additivity="false">
		<appender-ref ref="DB" />
	</logger>
	<logger name="com.zlikun.log.AsyncAppenderTest" level="DEBUG" additivity="false">
		<appender-ref ref="ASYNC_FILE" />
	</logger>

	<shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook" />

</configuration>